// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.32989
//    <NameSpace>NisanWPF.BusinessLogic</NameSpace><Collection>ObservableCollection</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net35</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace NisanWPF.BusinessLogic
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.ObjectModel;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class nisan : System.ComponentModel.INotifyPropertyChanged
    {

        private ObservableCollection<object> itemsField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("invoice", typeof(nisanInvoice))]
        [System.Xml.Serialization.XmlElementAttribute("order", typeof(nisanOrder))]
        [System.Xml.Serialization.XmlElementAttribute("purchase", typeof(nisanPurchase))]
        public ObservableCollection<object> Items
        {
            get
            {
                return this.itemsField;
            }
            set
            {
                if ((this.itemsField != null))
                {
                    if ((itemsField.Equals(value) != true))
                    {
                        this.itemsField = value;
                        this.OnPropertyChanged("Items");
                    }
                }
                else
                {
                    this.itemsField = value;
                    this.OnPropertyChanged("Items");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(nisan));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current nisan object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an nisan object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output nisan object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out nisan obj, out System.Exception exception)
        {
            exception = null;
            obj = default(nisan);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out nisan obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static nisan Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((nisan)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current nisan object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an nisan object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output nisan object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out nisan obj, out System.Exception exception)
        {
            exception = null;
            obj = default(nisan);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out nisan obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static nisan LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class nisanInvoice : System.ComponentModel.INotifyPropertyChanged
    {

        private string fromField;

        private string dateField;

        private decimal amountField;

        private bool amountFieldSpecified;

        private string remarksField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string from
        {
            get
            {
                return this.fromField;
            }
            set
            {
                if ((this.fromField != null))
                {
                    if ((fromField.Equals(value) != true))
                    {
                        this.fromField = value;
                        this.OnPropertyChanged("from");
                    }
                }
                else
                {
                    this.fromField = value;
                    this.OnPropertyChanged("from");
                }
            }
        }

        public string date
        {
            get
            {
                return this.dateField;
            }
            set
            {
                if ((this.dateField != null))
                {
                    if ((dateField.Equals(value) != true))
                    {
                        this.dateField = value;
                        this.OnPropertyChanged("date");
                    }
                }
                else
                {
                    this.dateField = value;
                    this.OnPropertyChanged("date");
                }
            }
        }

        public decimal amount
        {
            get
            {
                return this.amountField;
            }
            set
            {
                if ((this.amountField != null))
                {
                    if ((amountField.Equals(value) != true))
                    {
                        this.amountField = value;
                        this.OnPropertyChanged("amount");
                    }
                }
                else
                {
                    this.amountField = value;
                    this.OnPropertyChanged("amount");
                }
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool amountSpecified
        {
            get
            {
                return this.amountFieldSpecified;
            }
            set
            {
                if ((amountFieldSpecified.Equals(value) != true))
                {
                    this.amountFieldSpecified = value;
                    this.OnPropertyChanged("amountSpecified");
                }
            }
        }

        public string remarks
        {
            get
            {
                return this.remarksField;
            }
            set
            {
                if ((this.remarksField != null))
                {
                    if ((remarksField.Equals(value) != true))
                    {
                        this.remarksField = value;
                        this.OnPropertyChanged("remarks");
                    }
                }
                else
                {
                    this.remarksField = value;
                    this.OnPropertyChanged("remarks");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(nisanInvoice));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current nisanInvoice object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an nisanInvoice object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output nisanInvoice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out nisanInvoice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(nisanInvoice);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out nisanInvoice obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static nisanInvoice Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((nisanInvoice)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current nisanInvoice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an nisanInvoice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output nisanInvoice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out nisanInvoice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(nisanInvoice);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out nisanInvoice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static nisanInvoice LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class nisanOrder : System.ComponentModel.INotifyPropertyChanged
    {

        private string nameField;

        private string jawiField;

        private string bornField;

        private string bornmField;

        private string deathField;

        private string deathmField;

        private string ageField;

        private string name2Field;

        private string jawi2Field;

        private string born2Field;

        private string bornm2Field;

        private string death2Field;

        private string deathm2Field;

        private string age2Field;

        private string itemField;

        private string remarksField;

        private string tagsField;

        private string soldtoField;

        private string dateField;

        private string deliveredField;

        private string billField;

        private decimal priceField;

        private bool priceFieldSpecified;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("name");
                }
            }
        }

        public string jawi
        {
            get
            {
                return this.jawiField;
            }
            set
            {
                if ((this.jawiField != null))
                {
                    if ((jawiField.Equals(value) != true))
                    {
                        this.jawiField = value;
                        this.OnPropertyChanged("jawi");
                    }
                }
                else
                {
                    this.jawiField = value;
                    this.OnPropertyChanged("jawi");
                }
            }
        }

        public string born
        {
            get
            {
                return this.bornField;
            }
            set
            {
                if ((this.bornField != null))
                {
                    if ((bornField.Equals(value) != true))
                    {
                        this.bornField = value;
                        this.OnPropertyChanged("born");
                    }
                }
                else
                {
                    this.bornField = value;
                    this.OnPropertyChanged("born");
                }
            }
        }

        public string bornm
        {
            get
            {
                return this.bornmField;
            }
            set
            {
                if ((this.bornmField != null))
                {
                    if ((bornmField.Equals(value) != true))
                    {
                        this.bornmField = value;
                        this.OnPropertyChanged("bornm");
                    }
                }
                else
                {
                    this.bornmField = value;
                    this.OnPropertyChanged("bornm");
                }
            }
        }

        public string death
        {
            get
            {
                return this.deathField;
            }
            set
            {
                if ((this.deathField != null))
                {
                    if ((deathField.Equals(value) != true))
                    {
                        this.deathField = value;
                        this.OnPropertyChanged("death");
                    }
                }
                else
                {
                    this.deathField = value;
                    this.OnPropertyChanged("death");
                }
            }
        }

        public string deathm
        {
            get
            {
                return this.deathmField;
            }
            set
            {
                if ((this.deathmField != null))
                {
                    if ((deathmField.Equals(value) != true))
                    {
                        this.deathmField = value;
                        this.OnPropertyChanged("deathm");
                    }
                }
                else
                {
                    this.deathmField = value;
                    this.OnPropertyChanged("deathm");
                }
            }
        }

        public string age
        {
            get
            {
                return this.ageField;
            }
            set
            {
                if ((this.ageField != null))
                {
                    if ((ageField.Equals(value) != true))
                    {
                        this.ageField = value;
                        this.OnPropertyChanged("age");
                    }
                }
                else
                {
                    this.ageField = value;
                    this.OnPropertyChanged("age");
                }
            }
        }

        public string name2
        {
            get
            {
                return this.name2Field;
            }
            set
            {
                if ((this.name2Field != null))
                {
                    if ((name2Field.Equals(value) != true))
                    {
                        this.name2Field = value;
                        this.OnPropertyChanged("name2");
                    }
                }
                else
                {
                    this.name2Field = value;
                    this.OnPropertyChanged("name2");
                }
            }
        }

        public string jawi2
        {
            get
            {
                return this.jawi2Field;
            }
            set
            {
                if ((this.jawi2Field != null))
                {
                    if ((jawi2Field.Equals(value) != true))
                    {
                        this.jawi2Field = value;
                        this.OnPropertyChanged("jawi2");
                    }
                }
                else
                {
                    this.jawi2Field = value;
                    this.OnPropertyChanged("jawi2");
                }
            }
        }

        public string born2
        {
            get
            {
                return this.born2Field;
            }
            set
            {
                if ((this.born2Field != null))
                {
                    if ((born2Field.Equals(value) != true))
                    {
                        this.born2Field = value;
                        this.OnPropertyChanged("born2");
                    }
                }
                else
                {
                    this.born2Field = value;
                    this.OnPropertyChanged("born2");
                }
            }
        }

        public string bornm2
        {
            get
            {
                return this.bornm2Field;
            }
            set
            {
                if ((this.bornm2Field != null))
                {
                    if ((bornm2Field.Equals(value) != true))
                    {
                        this.bornm2Field = value;
                        this.OnPropertyChanged("bornm2");
                    }
                }
                else
                {
                    this.bornm2Field = value;
                    this.OnPropertyChanged("bornm2");
                }
            }
        }

        public string death2
        {
            get
            {
                return this.death2Field;
            }
            set
            {
                if ((this.death2Field != null))
                {
                    if ((death2Field.Equals(value) != true))
                    {
                        this.death2Field = value;
                        this.OnPropertyChanged("death2");
                    }
                }
                else
                {
                    this.death2Field = value;
                    this.OnPropertyChanged("death2");
                }
            }
        }

        public string deathm2
        {
            get
            {
                return this.deathm2Field;
            }
            set
            {
                if ((this.deathm2Field != null))
                {
                    if ((deathm2Field.Equals(value) != true))
                    {
                        this.deathm2Field = value;
                        this.OnPropertyChanged("deathm2");
                    }
                }
                else
                {
                    this.deathm2Field = value;
                    this.OnPropertyChanged("deathm2");
                }
            }
        }

        public string age2
        {
            get
            {
                return this.age2Field;
            }
            set
            {
                if ((this.age2Field != null))
                {
                    if ((age2Field.Equals(value) != true))
                    {
                        this.age2Field = value;
                        this.OnPropertyChanged("age2");
                    }
                }
                else
                {
                    this.age2Field = value;
                    this.OnPropertyChanged("age2");
                }
            }
        }

        public string item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                if ((this.itemField != null))
                {
                    if ((itemField.Equals(value) != true))
                    {
                        this.itemField = value;
                        this.OnPropertyChanged("item");
                    }
                }
                else
                {
                    this.itemField = value;
                    this.OnPropertyChanged("item");
                }
            }
        }

        public string remarks
        {
            get
            {
                return this.remarksField;
            }
            set
            {
                if ((this.remarksField != null))
                {
                    if ((remarksField.Equals(value) != true))
                    {
                        this.remarksField = value;
                        this.OnPropertyChanged("remarks");
                    }
                }
                else
                {
                    this.remarksField = value;
                    this.OnPropertyChanged("remarks");
                }
            }
        }

        public string tags
        {
            get
            {
                return this.tagsField;
            }
            set
            {
                if ((this.tagsField != null))
                {
                    if ((tagsField.Equals(value) != true))
                    {
                        this.tagsField = value;
                        this.OnPropertyChanged("tags");
                    }
                }
                else
                {
                    this.tagsField = value;
                    this.OnPropertyChanged("tags");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string soldto
        {
            get
            {
                return this.soldtoField;
            }
            set
            {
                if ((this.soldtoField != null))
                {
                    if ((soldtoField.Equals(value) != true))
                    {
                        this.soldtoField = value;
                        this.OnPropertyChanged("soldto");
                    }
                }
                else
                {
                    this.soldtoField = value;
                    this.OnPropertyChanged("soldto");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string date
        {
            get
            {
                return this.dateField;
            }
            set
            {
                if ((this.dateField != null))
                {
                    if ((dateField.Equals(value) != true))
                    {
                        this.dateField = value;
                        this.OnPropertyChanged("date");
                    }
                }
                else
                {
                    this.dateField = value;
                    this.OnPropertyChanged("date");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string delivered
        {
            get
            {
                return this.deliveredField;
            }
            set
            {
                if ((this.deliveredField != null))
                {
                    if ((deliveredField.Equals(value) != true))
                    {
                        this.deliveredField = value;
                        this.OnPropertyChanged("delivered");
                    }
                }
                else
                {
                    this.deliveredField = value;
                    this.OnPropertyChanged("delivered");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string bill
        {
            get
            {
                return this.billField;
            }
            set
            {
                if ((this.billField != null))
                {
                    if ((billField.Equals(value) != true))
                    {
                        this.billField = value;
                        this.OnPropertyChanged("bill");
                    }
                }
                else
                {
                    this.billField = value;
                    this.OnPropertyChanged("bill");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal price
        {
            get
            {
                return this.priceField;
            }
            set
            {
                if ((this.priceField != null))
                {
                    if ((priceField.Equals(value) != true))
                    {
                        this.priceField = value;
                        this.OnPropertyChanged("price");
                    }
                }
                else
                {
                    this.priceField = value;
                    this.OnPropertyChanged("price");
                }
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool priceSpecified
        {
            get
            {
                return this.priceFieldSpecified;
            }
            set
            {
                if ((priceFieldSpecified.Equals(value) != true))
                {
                    this.priceFieldSpecified = value;
                    this.OnPropertyChanged("priceSpecified");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(nisanOrder));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current nisanOrder object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an nisanOrder object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output nisanOrder object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out nisanOrder obj, out System.Exception exception)
        {
            exception = null;
            obj = default(nisanOrder);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out nisanOrder obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static nisanOrder Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((nisanOrder)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current nisanOrder object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an nisanOrder object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output nisanOrder object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out nisanOrder obj, out System.Exception exception)
        {
            exception = null;
            obj = default(nisanOrder);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out nisanOrder obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static nisanOrder LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class nisanPurchase : System.ComponentModel.INotifyPropertyChanged
    {

        private string buyfromField;

        private string dateField;

        private string quantityField;

        private decimal priceField;

        private bool priceFieldSpecified;

        private string itemField;

        private string remarksField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string buyfrom
        {
            get
            {
                return this.buyfromField;
            }
            set
            {
                if ((this.buyfromField != null))
                {
                    if ((buyfromField.Equals(value) != true))
                    {
                        this.buyfromField = value;
                        this.OnPropertyChanged("buyfrom");
                    }
                }
                else
                {
                    this.buyfromField = value;
                    this.OnPropertyChanged("buyfrom");
                }
            }
        }

        public string date
        {
            get
            {
                return this.dateField;
            }
            set
            {
                if ((this.dateField != null))
                {
                    if ((dateField.Equals(value) != true))
                    {
                        this.dateField = value;
                        this.OnPropertyChanged("date");
                    }
                }
                else
                {
                    this.dateField = value;
                    this.OnPropertyChanged("date");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "integer")]
        public string quantity
        {
            get
            {
                return this.quantityField;
            }
            set
            {
                if ((this.quantityField != null))
                {
                    if ((quantityField.Equals(value) != true))
                    {
                        this.quantityField = value;
                        this.OnPropertyChanged("quantity");
                    }
                }
                else
                {
                    this.quantityField = value;
                    this.OnPropertyChanged("quantity");
                }
            }
        }

        public decimal price
        {
            get
            {
                return this.priceField;
            }
            set
            {
                if ((this.priceField != null))
                {
                    if ((priceField.Equals(value) != true))
                    {
                        this.priceField = value;
                        this.OnPropertyChanged("price");
                    }
                }
                else
                {
                    this.priceField = value;
                    this.OnPropertyChanged("price");
                }
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool priceSpecified
        {
            get
            {
                return this.priceFieldSpecified;
            }
            set
            {
                if ((priceFieldSpecified.Equals(value) != true))
                {
                    this.priceFieldSpecified = value;
                    this.OnPropertyChanged("priceSpecified");
                }
            }
        }

        public string item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                if ((this.itemField != null))
                {
                    if ((itemField.Equals(value) != true))
                    {
                        this.itemField = value;
                        this.OnPropertyChanged("item");
                    }
                }
                else
                {
                    this.itemField = value;
                    this.OnPropertyChanged("item");
                }
            }
        }

        public string remarks
        {
            get
            {
                return this.remarksField;
            }
            set
            {
                if ((this.remarksField != null))
                {
                    if ((remarksField.Equals(value) != true))
                    {
                        this.remarksField = value;
                        this.OnPropertyChanged("remarks");
                    }
                }
                else
                {
                    this.remarksField = value;
                    this.OnPropertyChanged("remarks");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(nisanPurchase));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current nisanPurchase object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an nisanPurchase object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output nisanPurchase object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out nisanPurchase obj, out System.Exception exception)
        {
            exception = null;
            obj = default(nisanPurchase);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out nisanPurchase obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static nisanPurchase Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((nisanPurchase)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current nisanPurchase object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an nisanPurchase object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output nisanPurchase object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out nisanPurchase obj, out System.Exception exception)
        {
            exception = null;
            obj = default(nisanPurchase);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out nisanPurchase obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static nisanPurchase LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
}
